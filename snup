#!/bin/sh

usage(){
	cat <<"EOF"
Usage: snup [command] [options]

The available commands are:
    snap    Takes a snapshot
    list    Lists snapshots
    grep    Searches through snapshot comments
    delete  Deletes snapshots
    run     Chroots into snapshots and runs commands

Run snup [command] --help for more information about that command
EOF
}

# Returns the date of a snapshot based on its number
get_date(){
	ls /snapshots/system | awk -F'_' -v x=$1 '{if($2 == x){print $1}}'
}

# Returns the comment of a snapshot based on its number
get_comment(){
	ls /snapshots/system | awk -F'_' -v x=$1 '{if($2 == x){print $3}}'
}

mount_subvolume(){
	# Mount the special filesystems
	for dir in /proc /sys /dev /run /tmp; do
		mount --rbind $dir $1$dir
		mount --make-rslave $1$dir
	done

	# Mount entries from the fstab
	cat $1/etc/fstab | grep '^[^#]' | awk -v root=$1 '
	/^UUID=/ {if ($2 != "/"){ system("mount /dev/disk/by-uuid/" substr($1,6) " " root $2 " -t " $3 " -o " $4) }}
	/^PARTUUID=/ {if ($2 != "/"){ system("mount /dev/disk/by-partuuid/" substr($1,10) " " root $2 " -t " $3 " -o " $4) }}
	/^LABEL=/ {if ($2 != "/"){ system("mount /dev/disk/by-label/" substr($1,7) " " root $2 " -t " $3 " -o " $4) }}
	/^PARTLABEL=/ {if ($2 != "/"){ system("mount /dev/disk/by-partlabel/" substr($1,11) " " root $2 " -t " $3 " -o " $4) }}
	'	
}

unmount_subvolume(){
	# Unmount entries from the fstab
	tac $1/etc/fstab | grep '^[^#]' | awk -v root=$1 '{if ($2 != "/"){ system("umount " root $2) }}'

	# Unount the special filesystems
	for dir in /proc /sys /dev /run /tmp; do
		umount -R $1$dir
	done
}

# Parses a snapshot range description
# A snapshot range can be described with numbers (e.g. 2-8) 
# or dates (e.g. 2021/09/27-2021/10/10). Also, the notation <number>+ can be 
# used to represents all snapshots after <number> (e.g 7+)
# Individual snapshots can be described with a number (e.g. 13)
# In case a single date or comment is given, all snapshots with the given date
# or comment are matched
declare -a selected=()
declare -a all=($(ls /snapshots/system | cut -d'_' -f 2))
parse_range(){
	if [[ $1 =~ ^[0-9]+\+$ ]]; then # Number till end
		local start=$(echo $1 | cut -d'+' -f 1)
		local end=$(ls /snapshots/system | cut -d'_' -f 2 | sort -n | tail -n 1)
		while [[ $start -le $end ]]; do
			selected+=($start)
			(( start++ ))
		done
	elif [[ $1 =~ ^[0-9]+-[0-9]+$ ]]; then # Numerical range
		local start=$(echo $1 | cut -d'-' -f 1)
		local end=$(echo $1 | cut -d'-' -f 2)
		while [[ $start -le $end ]]; do
			selected+=($start)
			(( start++ ))
		done
	elif ls /snapshots/system | cut -d'_' -f 3 | grep "$1$" >/dev/null; then # Comment
		for i in $(ls /snapshots/system | grep "$1$" | cut -d'_' -f 2); do
			selected+=($i)
		done
	elif [[ $1 =~ ^[0-9]+[-/][0-9]+[-/][0-9]+-[0-9]+[-/][0-9]+[-/][0-9]+$ ]]; then # Date range
		if [[ -z $(echo $1 | cut -d'-' -f 4) ]]; then # Dates with slashes
			local date1=$(date +%s -d "$(echo $1 | cut -d'-' -f 1)")
			local date2=$(date +%s -d "$(echo $1 | cut -d'-' -f 2)")
		else # Dates with dashes
			local date1=$(date +%s -d "$(echo $1 | cut -d'-' -f 1-3)")
			local date2=$(date +%s -d "$(echo $1 | cut -d'-' -f 4-6)")
		fi
		for s in $(ls /snapshots/system); do
			local date=$(date +%s -d $(echo $s | cut -d'_' -f 1))
			if [[ $date -ge $date1 && $date -le $date2 ]]; then
				selected+=($(echo $s | cut -d'_' -f 2))
			fi
		done
	elif [[ $1 =~ ^[0-9]+$ ]]; then # Individual number
		selected+=($1)
	else # Single date
		local date=$(date +%Y-%m-%d -d "$1")
		for i in $(ls /snapshots/system | grep ^$date | cut -d'_' -f 2); do
			selected+=($i)
		done
	fi
}

# Lists the selected snapshots
list_selected(){
	printf "Number\tDate      \tComment\n"
	for i in ${selected[@]}; do
		local d=$(get_date $i)
		local c=$(get_comment $i)
		printf "$i\t$d\t$c\n"
	done
}

# Takes a snapshot of '/' into '/snapshots/system/<date>_<number>_<comment>'
snap(){
	if [[ "$1" = '--help' ]]; then cat <<EOF
Usage: snup snap [comment]

Takes a snapshot of '/'. Optionally, you can provide a brief comment to 
remember what the snapshot was about.
EOF
	return
	fi

	local date=$(date +%Y-%m-%d)
	local number=$(( $(ls /snapshots/system | cut -d '_' -f 2 | sort -n | tail -n 1) + 1 ))
	local comment=$1

	btrfs subvolume snapshot -r / /snapshots/system/${date}_${number}_${comment}
}

# Lists information about snapshots
list(){
	if [[ "$1" = '--help' ]]; then cat <<EOF
Usage: snup list [snapshots]

Lists information about snapshots. If no arguments are given, lists all 
snapshots. Else, it lists only the selected range of snapshots
EOF
	return
	fi

	if [[ -n $1 ]]; then
		parse_range "$1"
	else
		selected=(${all[@]})
	fi
	
	list_selected
}

command_grep(){
		if [[ "$1" = '--help' ]]; then cat <<EOF
Usage: snup grep [expression]

Greps against snapshot comments and lists the results
EOF
	return
	fi

	for s in $(ls /snapshots/system); do
		if echo $s | cut -d'_' -f 3 | grep "${@:1}" >/dev/null; then
			selected+=($(echo $s | cut -d'_' -f 2))
		fi
	done

	list_selected
}

# Deletes a snapshot
delete(){
	if [[ "$1" = '--help' ]]; then cat <<EOF
Usage: snup delete [snapshots]

Deletes a snapshot or a range of snapshots.
EOF
	return
	fi

	parse_range "$1"
	for i in ${selected[@]}; do
		btrfs subvolume delete /snapshots/system/$(ls /snapshots/system | grep "_${i}_")
	done
}

# Runs a command while chrooted into a snapshot
command_run(){
		if [[ "$1" = '--help' ]]; then cat <<EOF
Usage: snup run [snapshot] [command]

Runs a command while chrooted into a snapshot. Before chrooting, the entries 
in /etc/fstab are automatically mounted. If no command is provided, it runs a 
shell in the chrooted environment.
EOF
	return
	fi

	parse_range "$1"
	
	for i in ${selected[@]}; do
		local rootdir=/snapshots/system/$(ls /snapshots/system | grep "_${i}_")
		#for dir in /proc /sys /dev /run /tmp; do
		#	mount --rbind $dir $rootdir$dir
		#	mount --make-rslave $rootdir$dir
		#done

		mount_subvolume $rootdir
		
		chroot $rootdir ${*:2}

		#for dir in /proc /sys /dev /run /tmp; do
		#	umount -R $rootdir$dir
		#done

		unmount_subvolume $rootdir
	done
}

# Start parsing arguments
case $1 in
--help)
	usage
	;;
snap)
	snap "${@:2}"
	;;
list)
	list "${@:2}"
	;;
grep)
	command_grep "${@:2}"
	;;
delete)
	delete "${@:2}"
	;;
run)
	command_run "${@:2}"
	;;
*)
	echo "Unknown command: $1"
	echo "Try snup --help for more info"
	exit 1;
esac